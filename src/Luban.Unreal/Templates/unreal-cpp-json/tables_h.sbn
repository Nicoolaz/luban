#pragma once

#include "CoreMinimal.h"
{{~ for table in __tables ~}}
#include "{{make_cpp_name_without_perfix table.value_ttype.def_bean}}.h"
{{~ end ~}}
#include "DataTableSystem.generated.h"



UCLASS()
class {{__api_name}} UDataTableSystem : public UEngineSubsystem
{
    GENERATED_BODY()
private:
    {{~ for table in __tables ~}}
    UPROPERTY()
    TObjectPtr<UDataTable> {{table.name}};
    {{~ end ~}}
public:
    UDataTableSystem() { }

    {{~ for table in __tables ~}}
    UFUNCTION(BlueprintCallable, Category="DataStreamingLibrary")
    const UDataTable* GetOrCreate{{table.name}}()
    {
        if(!{{table.name}})
        {
            {{table.name}} = *LoadObject<UDataTable>(NULL, TEXT("{{__package_name}}{{table.output_data_file}}.{{table.output_data_file}}"));
        }
        if(!{{table.name}})
        {
            UE_LOG(LogTemp, Error, TEXT("Can not get data table %s!!"), TEXT("{{table.name}}"));
        }
        return {{table.name}}.Get();
    }
    
    const {{make_cpp_name table.value_ttype.def_bean}}* Get{{table.name}}RowByName(FName rowName)
    {
        const UDataTable* table = GetOrCreate{{table.name}}();
        if(table)
            return table->FindRow<{{make_cpp_name table.value_ttype.def_bean}}>(rowName, nullptr);
        
        return nullptr;
    }

    UFUNCTION(BlueprintCallable, Category = "DataStreamingLibrary", meta = (CustomStructureParam = "OutRow"))
    const bool BPGet{{table.name}}RowByName(FName RowName, {{make_cpp_name table.value_ttype.def_bean}}& OutRow)
    {
        bool bResult = false;
        const UDataTable* Table = GetOrCreateItemTable();
        {{make_cpp_name table.value_ttype.def_bean}}* RowPtr = Table->FindRow<{{make_cpp_name table.value_ttype.def_bean}}>(RowName, nullptr);
        if (RowPtr != nullptr) {
            OutRow = *RowPtr;
            bResult = true;
        }
        return bResult;
    }
    
    void Get{{table.name}}Rows(OUT TArray<{{make_cpp_name table.value_ttype.def_bean}}*>& rows)
    {   
        const UDataTable* table = GetOrCreate{{table.name}}();
        if(table)   
            table->GetAllRows<{{make_cpp_name table.value_ttype.def_bean}}>(nullptr, rows);
    }
    {{~ end ~}} 
};
